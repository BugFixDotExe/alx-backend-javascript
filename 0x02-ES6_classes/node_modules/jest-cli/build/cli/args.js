'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.options = exports.docs = exports.usage = exports.check = void 0;

function _jestConfig() {
  const data = require('jest-config');

  _jestConfig = function _jestConfig() {
    return data;
  };

  return data;
}

function _isCi() {
  const data = _interopRequireDefault(require('is-ci'));

  _isCi = function _isCi() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const check = argv => {
  if (argv.runInBand && argv.hasOwnProperty('maxWorkers')) {
    throw new Error(
      'Both --runInBand and --maxWorkers were specified, but these two ' +
        'options do not make sense together. Which is it?'
    );
  }

  var _arr = [
    'onlyChanged',
    'lastCommit',
    'changedFilesWithAncestor',
    'changedSince'
  ];

  for (var _i = 0; _i < _arr.length; _i++) {
    const key = _arr[_i];

    if (argv[key] && argv.watchAll) {
      throw new Error(
        `Both --${key} and --watchAll were specified, but these two ` +
          'options do not make sense together. Try the --watch option which ' +
          'reruns only tests related to changed files.'
      );
    }
  }

  if (argv.findRelatedTests && argv._.length === 0) {
    throw new Error(
      'The --findRelatedTests option requires file paths to be specified.\n' +
        'Example usage: jest --findRelatedTests ./src/source.js ' +
        './src/index.js.'
    );
  }

  if (argv.hasOwnProperty('maxWorkers') && argv.maxWorkers === undefined) {
    throw new Error(
      'The --maxWorkers (-w) option requires a number or string to be specified.\n' +
        'Example usage: jest --maxWorkers 2\n' +
        'Example usage: jest --maxWorkers 50%\n' +
        'Or did you mean --watch?'
    );
  }

  if (
    argv.config &&
    !(0, _jestConfig().isJSONString)(argv.config) &&
    !argv.config.match(/\.js(on)?$/)
  ) {
    throw new Error(
      'The --config option requires a JSON string literal, or a file path with a .js or .json extension.\n' +
        'Example usage: jest --config ./jest.config.js'
    );
  }

  return true;
};

exports.check = check;
const usage = 'Usage: $0 [--config=<pathToConfigFile>] [TestPathPattern]';
exports.usage = usage;
const docs = 'Documentation: htt